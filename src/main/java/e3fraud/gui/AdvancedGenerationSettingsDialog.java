/*
 * Copyright (C) 2016 Dan
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */
package e3fraud.gui;

import e3fraud.tools.SettingsObjects.AdvancedGenerationSettings;
import java.awt.event.ActionEvent;
import java.awt.event.KeyEvent;
import javax.swing.AbstractAction;
import javax.swing.ActionMap;
import javax.swing.InputMap;
import javax.swing.JComponent;
import javax.swing.KeyStroke;

/**
 *
 * @author Dan
 */
public class AdvancedGenerationSettingsDialog extends javax.swing.JDialog {


    /**
     * A return status code - returned if OK button has been pressed
     */
    public AdvancedGenerationSettings settings = null;

    public  AdvancedGenerationSettings getSettings() {
        return settings;
    }
    
    



    /**
     * Creates new form AdvancedGenerationSettingsDialog
     * @param parent
     * @param modal
     * @param settings
     * @param nonOccurringSetting
     * @param hiddenSetting
     * @param collusionSetting
     * @param colludingActors
     */
    public AdvancedGenerationSettingsDialog(java.awt.Frame parent, boolean modal, AdvancedGenerationSettings settings) {
        super(parent, modal);
        initComponents(); 
         
        generateHiddenTransfersCheckbox.setSelected(settings.isGenerateCollusion());
        generateNonOccurringTransfersCheckbox.setSelected(settings.isGenerateNonOccurring()); 
        generateCollusionCheckbox.setSelected(settings.isGenerateCollusion());        
        collusionSpinner.setValue(settings.getColludingActors());
        hiddenTransfersComboBox.setSelectedIndex(settings.getNumberOfHiddenTransfersPerExchange()-1);//-1 because ComboBox selection is 0-based
        

        // Close the dialog when Esc is pressed
        String cancelName = "cancel";
        InputMap inputMap = getRootPane().getInputMap(JComponent.WHEN_ANCESTOR_OF_FOCUSED_COMPONENT);
        inputMap.put(KeyStroke.getKeyStroke(KeyEvent.VK_ESCAPE, 0), cancelName);
        ActionMap actionMap = getRootPane().getActionMap();
        actionMap.put(cancelName, new AbstractAction() {
            public void actionPerformed(ActionEvent e) {
                doClose(settings);
            }
        });
        setLocationRelativeTo(parent);
        setVisible(true);
    }


    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        advancedGenerationSettingsButtonGroup = new javax.swing.ButtonGroup();
        jSpinner1 = new javax.swing.JSpinner();
        generateHiddenTransfersCheckbox = new javax.swing.JCheckBox();
        generateNonOccurringTransfersCheckbox = new javax.swing.JCheckBox();
        generateCollusionCheckbox = new javax.swing.JCheckBox();
        advancedGenerationSettingsLabel = new javax.swing.JLabel();
        collusionSpinner = new javax.swing.JSpinner();
        actorsLabel = new javax.swing.JLabel();
        okButton = new javax.swing.JButton();
        cancelButton = new javax.swing.JButton();
        hiddenTransfersComboBox = new javax.swing.JComboBox<>();

        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                closeDialog(evt);
            }
        });

        generateHiddenTransfersCheckbox.setSelected(true);
        generateHiddenTransfersCheckbox.setText("Hidden transfers valuated at");
        generateHiddenTransfersCheckbox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                generateHiddenTransfersCheckboxActionPerformed(evt);
            }
        });

        generateNonOccurringTransfersCheckbox.setSelected(true);
        generateNonOccurringTransfersCheckbox.setText("Non-occurring transfers");
        generateNonOccurringTransfersCheckbox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                generateNonOccurringTransfersCheckboxActionPerformed(evt);
            }
        });

        generateCollusionCheckbox.setSelected(true);
        generateCollusionCheckbox.setText("Collusion of up to");
        generateCollusionCheckbox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                generateCollusionCheckboxActionPerformed(evt);
            }
        });

        advancedGenerationSettingsLabel.setText("Generate fraud scenarios containing:");

        collusionSpinner.setModel(new javax.swing.SpinnerNumberModel(1, 0, 3, 1));
        collusionSpinner.setEnabled(generateCollusionCheckbox.isSelected());

        actorsLabel.setText("actors");

        okButton.setText("OK");
        okButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                okButtonActionPerformed(evt);
            }
        });

        cancelButton.setText("Cancel");
        cancelButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cancelButtonActionPerformed(evt);
            }
        });

        hiddenTransfersComboBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "50% of revenue", "33% and 66% of revenue", "25%, 50% and 75% of revenue" }));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(generateCollusionCheckbox)
                            .addComponent(cancelButton))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(collusionSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(actorsLabel)
                                .addGap(0, 0, Short.MAX_VALUE))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addGap(0, 147, Short.MAX_VALUE)
                                .addComponent(okButton, javax.swing.GroupLayout.PREFERRED_SIZE, 67, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addContainerGap())
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(generateHiddenTransfersCheckbox)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(hiddenTransfersComboBox, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(advancedGenerationSettingsLabel)
                                    .addComponent(generateNonOccurringTransfersCheckbox))
                                .addGap(0, 0, Short.MAX_VALUE)))
                        .addGap(10, 10, 10))))
        );

        layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {cancelButton, okButton});

        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(advancedGenerationSettingsLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(generateHiddenTransfersCheckbox, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(hiddenTransfersComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(generateNonOccurringTransfersCheckbox)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(generateCollusionCheckbox)
                    .addComponent(collusionSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(actorsLabel))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 12, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(cancelButton)
                    .addComponent(okButton))
                .addContainerGap())
        );

        getRootPane().setDefaultButton(okButton);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void okButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_okButtonActionPerformed
        
        boolean genearateHiddenTransfers = generateHiddenTransfersCheckbox.isSelected();
        boolean generateNonOccurringTransfers = generateNonOccurringTransfersCheckbox.isSelected(); 
        boolean generateCollusion = generateCollusionCheckbox.isSelected();        
        int numberOfColludingActors = (Integer) collusionSpinner.getValue();
        int hiddenTransfersToGenerate = (Integer) hiddenTransfersComboBox.getSelectedIndex()+1; //+1 because ComboBox selection is 0-based
        settings = new AdvancedGenerationSettings(genearateHiddenTransfers, generateNonOccurringTransfers, generateCollusion, numberOfColludingActors, hiddenTransfersToGenerate );
        doClose(settings);    
    }//GEN-LAST:event_okButtonActionPerformed

    private void cancelButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cancelButtonActionPerformed
        doClose(null);
    }//GEN-LAST:event_cancelButtonActionPerformed

    /**
     * Closes the dialog
     */
    private void closeDialog(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_closeDialog
        doClose(null);
    }//GEN-LAST:event_closeDialog

    private void generateHiddenTransfersCheckboxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_generateHiddenTransfersCheckboxActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_generateHiddenTransfersCheckboxActionPerformed

    private void generateNonOccurringTransfersCheckboxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_generateNonOccurringTransfersCheckboxActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_generateNonOccurringTransfersCheckboxActionPerformed

    private void generateCollusionCheckboxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_generateCollusionCheckboxActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_generateCollusionCheckboxActionPerformed
    
    private void doClose(AdvancedGenerationSettings settings) {
        this.settings = settings;
        setVisible(false);
        dispose();
    }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel actorsLabel;
    private javax.swing.ButtonGroup advancedGenerationSettingsButtonGroup;
    private javax.swing.JLabel advancedGenerationSettingsLabel;
    private javax.swing.JButton cancelButton;
    private javax.swing.JSpinner collusionSpinner;
    private javax.swing.JCheckBox generateCollusionCheckbox;
    private javax.swing.JCheckBox generateHiddenTransfersCheckbox;
    private javax.swing.JCheckBox generateNonOccurringTransfersCheckbox;
    private javax.swing.JComboBox<String> hiddenTransfersComboBox;
    private javax.swing.JSpinner jSpinner1;
    private javax.swing.JButton okButton;
    // End of variables declaration//GEN-END:variables

 
}
