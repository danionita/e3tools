/*
 * Copyright (C) 2016 Dan
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */
package e3fraud.gui;

import java.awt.event.ActionEvent;
import java.awt.event.KeyEvent;
import javax.swing.AbstractAction;
import javax.swing.ActionMap;
import javax.swing.InputMap;
import javax.swing.JCheckBox;
import javax.swing.JComponent;
import javax.swing.JSpinner;
import javax.swing.KeyStroke;

/**
 *
 * @author Dan
 */
public class AdvancedGenerationSettingsDialog extends javax.swing.JDialog {
    public class settingsObject{
        boolean generateHidden, generateNonOccurring, generateCollusion;
        int collusions;

        public settingsObject(boolean generateHidden, boolean generateNonOccurring, boolean generateCollusion, int collusions) {
            this.generateHidden = generateHidden;
            this.generateNonOccurring = generateNonOccurring;
            this.generateCollusion = generateCollusion;
            this.collusions = collusions;
        }
        
    }

    /**
     * A return status code - returned if OK button has been pressed
     */
    public static settingsObject settings = null;

    public  settingsObject getSettings() {
        return settings;
    }
    
    



    /**
     * Creates new form AdvancedGenerationSettingsDialog
     * @param parent
     * @param modal
     * @param nonOccurringSetting
     * @param hiddenSetting
     * @param collusionSetting
     * @param collusionNumber
     */
    public AdvancedGenerationSettingsDialog(java.awt.Frame parent, boolean modal, boolean hiddenSetting, boolean nonOccurringSetting, boolean collusionSetting, int collusionNumber) {
        super(parent, modal);
        initComponents();
        
        
         
        generateHiddenTransfrersCheckbox.setSelected(hiddenSetting);
        generateNonOccurringTransfersCheckbox.setSelected(nonOccurringSetting); 
        generateCollusionCheckbox.setSelected(collusionSetting);        
        collusionSpinner.setValue(collusionNumber);
        

        // Close the dialog when Esc is pressed
        String cancelName = "cancel";
        InputMap inputMap = getRootPane().getInputMap(JComponent.WHEN_ANCESTOR_OF_FOCUSED_COMPONENT);
        inputMap.put(KeyStroke.getKeyStroke(KeyEvent.VK_ESCAPE, 0), cancelName);
        ActionMap actionMap = getRootPane().getActionMap();
        actionMap.put(cancelName, new AbstractAction() {
            public void actionPerformed(ActionEvent e) {
                doClose(settings);
            }
        });
        setVisible(true);
        setLocationRelativeTo(parent);
        
    }


    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        advancedGenerationSettingsButtonGroup = new javax.swing.ButtonGroup();
        generateHiddenTransfrersCheckbox = new javax.swing.JCheckBox();
        generateNonOccurringTransfersCheckbox = new javax.swing.JCheckBox();
        generateCollusionCheckbox = new javax.swing.JCheckBox();
        advancedGenerationSettingsLabel = new javax.swing.JLabel();
        collusionSpinner = new javax.swing.JSpinner();
        actorsLabel = new javax.swing.JLabel();
        okButton = new javax.swing.JButton();
        cancelButton = new javax.swing.JButton();

        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                closeDialog(evt);
            }
        });

        generateHiddenTransfrersCheckbox.setSelected(true);
        generateHiddenTransfrersCheckbox.setText("Hidden transfers");
        generateHiddenTransfrersCheckbox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                generateHiddenTransfrersCheckboxActionPerformed(evt);
            }
        });

        generateNonOccurringTransfersCheckbox.setSelected(true);
        generateNonOccurringTransfersCheckbox.setText("Non-occurring transfers");
        generateNonOccurringTransfersCheckbox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                generateNonOccurringTransfersCheckboxActionPerformed(evt);
            }
        });

        generateCollusionCheckbox.setSelected(true);
        generateCollusionCheckbox.setText("Collusion of up to");
        generateCollusionCheckbox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                generateCollusionCheckboxActionPerformed(evt);
            }
        });

        advancedGenerationSettingsLabel.setText("Generate fraud scenarios containing:");

        collusionSpinner.setModel(new javax.swing.SpinnerNumberModel(1, 0, 3, 1));
        collusionSpinner.setEnabled(generateCollusionCheckbox.isSelected());

        actorsLabel.setText("actors");

        okButton.setText("OK");
        okButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                okButtonActionPerformed(evt);
            }
        });

        cancelButton.setText("Cancel");
        cancelButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cancelButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(advancedGenerationSettingsLabel)
                    .addComponent(generateHiddenTransfrersCheckbox)
                    .addComponent(generateNonOccurringTransfersCheckbox)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(generateCollusionCheckbox)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(collusionSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(actorsLabel))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(cancelButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(okButton, javax.swing.GroupLayout.PREFERRED_SIZE, 67, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {cancelButton, okButton});

        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(advancedGenerationSettingsLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(generateHiddenTransfrersCheckbox)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(generateNonOccurringTransfersCheckbox)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(generateCollusionCheckbox)
                    .addComponent(collusionSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(actorsLabel))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 18, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(cancelButton)
                    .addComponent(okButton))
                .addContainerGap())
        );

        getRootPane().setDefaultButton(okButton);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void okButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_okButtonActionPerformed
        
        generateHiddenTransfrersCheckbox.isSelected();
        generateNonOccurringTransfersCheckbox.isSelected(); 
        generateCollusionCheckbox.isSelected();        
        collusionSpinner.getValue();
        settings = new settingsObject(generateHiddenTransfrersCheckbox.isSelected(), generateNonOccurringTransfersCheckbox.isSelected(), generateCollusionCheckbox.isSelected(), (Integer) collusionSpinner.getValue());
        doClose(settings);    
    }//GEN-LAST:event_okButtonActionPerformed

    private void cancelButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cancelButtonActionPerformed
        doClose(null);
    }//GEN-LAST:event_cancelButtonActionPerformed

    /**
     * Closes the dialog
     */
    private void closeDialog(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_closeDialog
        doClose(null);
    }//GEN-LAST:event_closeDialog

    private void generateHiddenTransfrersCheckboxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_generateHiddenTransfrersCheckboxActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_generateHiddenTransfrersCheckboxActionPerformed

    private void generateNonOccurringTransfersCheckboxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_generateNonOccurringTransfersCheckboxActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_generateNonOccurringTransfersCheckboxActionPerformed

    private void generateCollusionCheckboxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_generateCollusionCheckboxActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_generateCollusionCheckboxActionPerformed
    
    private void doClose(settingsObject settings) {
        this.settings = settings;
        setVisible(false);
        dispose();
    }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel actorsLabel;
    private javax.swing.ButtonGroup advancedGenerationSettingsButtonGroup;
    private javax.swing.JLabel advancedGenerationSettingsLabel;
    private javax.swing.JButton cancelButton;
    private javax.swing.JSpinner collusionSpinner;
    private javax.swing.JCheckBox generateCollusionCheckbox;
    private javax.swing.JCheckBox generateHiddenTransfrersCheckbox;
    private javax.swing.JCheckBox generateNonOccurringTransfersCheckbox;
    private javax.swing.JButton okButton;
    // End of variables declaration//GEN-END:variables

 
}
