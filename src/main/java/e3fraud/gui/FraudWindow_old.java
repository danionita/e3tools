/**
 * *****************************************************************************
 * Copyright (C) 2015 Dan Ionita
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 * *****************************************************************************
 */
/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package e3fraud.gui;

import java.awt.Cursor;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.beans.PropertyChangeEvent;
import java.beans.PropertyChangeListener;
import java.util.Map;
import java.util.concurrent.ExecutionException;

import javax.swing.DefaultComboBoxModel;
import javax.swing.JFrame;
import javax.swing.JScrollPane;
import javax.swing.tree.DefaultMutableTreeNode;
import javax.swing.tree.DefaultTreeModel;
import javax.swing.tree.TreeModel;
import javax.swing.tree.TreeSelectionModel;

import org.jfree.chart.ChartPanel;
import org.jfree.chart.JFreeChart;

import com.hp.hpl.jena.rdf.model.Resource;
import com.mxgraph.model.mxGeometry;
import com.mxgraph.view.mxGraphView;

import design.E3Graph;
import design.E3GraphComponent;
import design.Main;
import design.info.Actor;
import design.info.MarketSegment;
import design.info.ValueActivity;
import e3fraud.model.E3Model;
import e3fraud.tools.GenerationWorkerV2;
import e3fraud.tools.SortingAndFilteringWorker;
import e3fraud.tools.SettingsObjects.AdvancedGenerationSettings;
import e3fraud.tools.SettingsObjects.FilteringSettings;
import e3fraud.tools.SettingsObjects.GenerationSettings;
import e3fraud.tools.SettingsObjects.SortingAndGroupingSettings;
import java.util.Enumeration;
import javax.swing.tree.TreeNode;
import javax.swing.tree.TreePath;

/**
 *
 * @author Dan
 */
public class FraudWindow_old extends javax.swing.JPanel {

    static private final String newline = "\n";
    private JFreeChart chart = null;
    private E3Model baseModel = null;
    private final E3Graph baseGraph;
    private final Main mainFrame;
    private E3Graph graph;
    private E3Model selectedModel;
    private FilteringSettings filteringSettings;
    private GenerationSettings generationSettings;
    private SortingAndGroupingSettings sortingAndGroupingSettings;
    private AdvancedGenerationSettings advancedGenerationSettings;
    private final Map<String, Resource> actorsMap;
    private final Map<String, Resource> needsMap;
    private java.util.HashMap<String, java.util.Set<E3Model>> groupedSubIdealModels;
    private ChartPanel chartPanel;
    private ResultObject results;
    private E3GraphComponent graphPanel;
    public static FraudWindow_old mainWindowInstance;
    private JFrame myFrame;

    /**
     * Creates new form MainWindowV2
     *
     * @param original
     * @param baseModel the model to analyze
     * @param mainFrame the parent frame
     * @param myFrame
     */
    public FraudWindow_old(E3Graph original, E3Model baseModel, Main mainFrame, JFrame myFrame) {
        this.baseGraph = original;
        this.baseModel = baseModel;
        this.mainFrame = mainFrame;
        this.myFrame = myFrame;
        actorsMap = this.baseModel.getActorsMap();
        needsMap = this.baseModel.getNeedsMap();

        //initialize advanced settings to defaults
        this.advancedGenerationSettings = new AdvancedGenerationSettings();
        this.sortingAndGroupingSettings = new SortingAndGroupingSettings();
        this.generationSettings = new GenerationSettings();
        this.filteringSettings = new FilteringSettings();
        initComponents();
        readSettings();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        fraudTypeButtonGroup = new javax.swing.ButtonGroup();
        mainPane = new javax.swing.JSplitPane();
        topPane = new javax.swing.JSplitPane();
        generationSettingsPanel = new javax.swing.JPanel();
        mainActorLabel = new javax.swing.JLabel();
        mainActorComboBox = new javax.swing.JComboBox<>();
        needLabel = new javax.swing.JLabel();
        needComboBox = new javax.swing.JComboBox<>();
        occuringLabel = new javax.swing.JLabel();
        generationSettingsSeparator1 = new javax.swing.JSeparator();
        needToLabel = new javax.swing.JLabel();
        timesLabel = new javax.swing.JLabel();
        advancedSettingsLabel = new javax.swing.JLabel();
        resultCountLabel = new javax.swing.JLabel();
        generationSettingsLabel = new javax.swing.JLabel();
        generationLayeredPane = new javax.swing.JLayeredPane();
        generateButton = new javax.swing.JButton();
        progressBar = new javax.swing.JProgressBar();
        needStartField = new javax.swing.JFormattedTextField();
        needEndField = new javax.swing.JFormattedTextField();
        showAllLabel = new javax.swing.JLabel();
        listPane = new javax.swing.JSplitPane();
        listSettingsPanel = new javax.swing.JPanel();
        rankingSettingLabel = new javax.swing.JLabel();
        groupSettingLabel = new javax.swing.JLabel();
        sortComboBox = new javax.swing.JComboBox<>();
        groupComboBox = new javax.swing.JComboBox<>();
        listSettingsSeparator = new javax.swing.JSeparator();
        gainLabel = new javax.swing.JLabel();
        lossLabel = new javax.swing.JLabel();
        refreshButton = new javax.swing.JButton();
        lossStartField = new javax.swing.JFormattedTextField();
        gainStartField = new javax.swing.JFormattedTextField();
        gainToLabel = new javax.swing.JLabel();
        lossToLabel = new javax.swing.JLabel();
        lossEndField = new javax.swing.JFormattedTextField();
        gainEndField = new javax.swing.JFormattedTextField();
        SortingAndGroupingLabel = new javax.swing.JLabel();
        FiltersLabel = new javax.swing.JLabel();
        resultScrollPane = new javax.swing.JScrollPane();
        root = new DefaultMutableTreeNode("No models generated yet...");
        treeModel = new DefaultTreeModel(root);
        tree = new javax.swing.JTree(treeModel);
        bottomPane = new javax.swing.JLayeredPane();
        visualizationPane = new javax.swing.JSplitPane();
        tablePane = new javax.swing.JPanel();
        tableLabel = new javax.swing.JLabel();
        graphPane = new javax.swing.JPanel();
        graphLabel = new javax.swing.JLabel();
        placeholderLabel = new javax.swing.JLabel();

        mainPane.setOrientation(javax.swing.JSplitPane.VERTICAL_SPLIT);
        mainPane.setResizeWeight(0.5);

        generationSettingsPanel.setMinimumSize(new java.awt.Dimension(200, 310));
        generationSettingsPanel.setPreferredSize(new java.awt.Dimension(200, 370));

        mainActorLabel.setText("Trusted actor:");
        mainActorLabel.setToolTipText("The main actor is the trusted actor (usually the one which is coducting the assessment)");

        mainActorComboBox.setModel(new DefaultComboBoxModel(actorsMap.keySet().toArray()));

        needLabel.setText("Need:");
        needLabel.setToolTipText("This is the need that will be parametrized and shown on the x-axis of the profitability chart");

        needComboBox.setModel(new DefaultComboBoxModel(needsMap.keySet().toArray()));

        occuringLabel.setText("occurs");
        occuringLabel.setToolTipText("The range of the x-axis");

        needToLabel.setText("to");

        timesLabel.setText("times");

        advancedSettingsLabel.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        advancedSettingsLabel.setForeground(new java.awt.Color(6, 69, 173));
        advancedSettingsLabel.setText("Advanced settings...");
        advancedSettingsLabel.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        advancedSettingsLabel.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                advancedSettingsLabelMouseClicked(evt);
            }
        });

        resultCountLabel.setFont(new java.awt.Font("Tahoma", 2, 12)); // NOI18N
        resultCountLabel.setForeground(new java.awt.Color(102, 102, 102));
        resultCountLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        resultCountLabel.setText("0 fraud(s) generated");
        resultCountLabel.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);

        generationSettingsLabel.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        generationSettingsLabel.setText("Fraud generation");

        generateButton.setForeground(new java.awt.Color(0, 153, 0));
        generateButton.setText("Generate");
        generateButton.setToolTipText("Generate fraud scenarios based on the above settings");
        generateButton.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 102, 51)));
        generateButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                generateButtonActionPerformed(evt);
            }
        });

        progressBar.setStringPainted(true);

        generationLayeredPane.setLayer(generateButton, javax.swing.JLayeredPane.DEFAULT_LAYER);
        generationLayeredPane.setLayer(progressBar, javax.swing.JLayeredPane.DEFAULT_LAYER);

        javax.swing.GroupLayout generationLayeredPaneLayout = new javax.swing.GroupLayout(generationLayeredPane);
        generationLayeredPane.setLayout(generationLayeredPaneLayout);
        generationLayeredPaneLayout.setHorizontalGroup(
            generationLayeredPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(generateButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(generationLayeredPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addComponent(progressBar, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 932, Short.MAX_VALUE))
        );
        generationLayeredPaneLayout.setVerticalGroup(
            generationLayeredPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(generateButton, javax.swing.GroupLayout.DEFAULT_SIZE, 40, Short.MAX_VALUE)
            .addGroup(generationLayeredPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addComponent(progressBar, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 40, Short.MAX_VALUE))
        );

        needStartField.setText("1");
        needStartField.setPreferredSize(new java.awt.Dimension(25, 22));

        needEndField.setText("500");
        needEndField.setPreferredSize(new java.awt.Dimension(25, 22));

        showAllLabel.setFont(new java.awt.Font("Tahoma", 2, 11)); // NOI18N
        showAllLabel.setForeground(new java.awt.Color(6, 69, 173));
        showAllLabel.setText("(show all)");
        showAllLabel.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                showAllLabelMouseClicked(evt);
            }
        });

        javax.swing.GroupLayout generationSettingsPanelLayout = new javax.swing.GroupLayout(generationSettingsPanel);
        generationSettingsPanel.setLayout(generationSettingsPanelLayout);
        generationSettingsPanelLayout.setHorizontalGroup(
            generationSettingsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(generationSettingsPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(generationSettingsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(generationSettingsLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(generationSettingsPanelLayout.createSequentialGroup()
                        .addGroup(generationSettingsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(generationSettingsSeparator1)
                            .addGroup(generationSettingsPanelLayout.createSequentialGroup()
                                .addComponent(mainActorLabel)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(mainActorComboBox, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                            .addGroup(generationSettingsPanelLayout.createSequentialGroup()
                                .addComponent(needLabel)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(needComboBox, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                            .addComponent(resultCountLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(generationLayeredPane)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, generationSettingsPanelLayout.createSequentialGroup()
                                .addGap(2, 2, 2)
                                .addGroup(generationSettingsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, generationSettingsPanelLayout.createSequentialGroup()
                                        .addComponent(occuringLabel)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(needStartField, javax.swing.GroupLayout.DEFAULT_SIZE, 47, Short.MAX_VALUE)
                                        .addGap(6, 6, 6)
                                        .addComponent(needToLabel)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(needEndField, javax.swing.GroupLayout.DEFAULT_SIZE, 47, Short.MAX_VALUE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(timesLabel))
                                    .addComponent(advancedSettingsLabel, javax.swing.GroupLayout.Alignment.TRAILING))))
                        .addContainerGap())))
            .addGroup(generationSettingsPanelLayout.createSequentialGroup()
                .addGap(81, 81, 81)
                .addComponent(showAllLabel)
                .addGap(0, 0, Short.MAX_VALUE))
        );
        generationSettingsPanelLayout.setVerticalGroup(
            generationSettingsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(generationSettingsPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(generationSettingsLabel)
                .addGap(18, 18, 18)
                .addGroup(generationSettingsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(mainActorLabel)
                    .addComponent(mainActorComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(generationSettingsSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 1, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(generationSettingsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(needComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(needLabel))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(generationSettingsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(occuringLabel)
                    .addComponent(needToLabel)
                    .addComponent(needStartField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(needEndField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(timesLabel))
                .addGap(22, 22, 22)
                .addComponent(generationLayeredPane, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(resultCountLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(showAllLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 44, Short.MAX_VALUE)
                .addComponent(advancedSettingsLabel)
                .addContainerGap())
        );

        resultCountLabel.setVisible(false);
        showAllLabel.setVisible(false);

        topPane.setLeftComponent(generationSettingsPanel);

        listPane.setResizeWeight(1.0);
        listPane.setFocusTraversalPolicyProvider(true);

        listSettingsPanel.setMinimumSize(new java.awt.Dimension(200, 250));
        listSettingsPanel.setPreferredSize(new java.awt.Dimension(200, 370));

        rankingSettingLabel.setText("Sort by:");

        groupSettingLabel.setText("Group by:");

        sortComboBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "loss (of trusted actor)", "gain (of other actors)" }));
        sortComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                sortComboBoxActionPerformed(evt);
            }
        });

        groupComboBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "financial result", "collusion groups" }));
        groupComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                groupComboBoxActionPerformed(evt);
            }
        });

        gainLabel.setText("Gain of other actors ");

        lossLabel.setText("Loss of main actor");

        refreshButton.setText("Apply");
        refreshButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                refreshButtonActionPerformed(evt);
            }
        });

        lossStartField.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.NumberFormatter(new java.text.DecimalFormat("#.##"))));
        lossStartField.setText("0");
        lossStartField.setToolTipText("");
        lossStartField.setPreferredSize(new java.awt.Dimension(60, 22));
        lossStartField.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                lossStartFieldFocusLost(evt);
            }
        });

        gainStartField.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.NumberFormatter(new java.text.DecimalFormat("#0.##"))));
        gainStartField.setText("0");
        gainStartField.setPreferredSize(new java.awt.Dimension(60, 22));
        gainStartField.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                gainStartFieldFocusLost(evt);
            }
        });

        gainToLabel.setText("to");

        lossToLabel.setText("to");

        lossEndField.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.NumberFormatter(new java.text.DecimalFormat("#0.##"))));
        lossEndField.setPreferredSize(new java.awt.Dimension(60, 22));
        lossEndField.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                lossEndFieldFocusLost(evt);
            }
        });

        gainEndField.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.NumberFormatter(new java.text.DecimalFormat("#0.##"))));
        gainEndField.setPreferredSize(new java.awt.Dimension(60, 22));
        gainEndField.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                gainEndFieldFocusLost(evt);
            }
        });

        SortingAndGroupingLabel.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        SortingAndGroupingLabel.setText("Sorting and grouping");

        FiltersLabel.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        FiltersLabel.setText("Filters");

        javax.swing.GroupLayout listSettingsPanelLayout = new javax.swing.GroupLayout(listSettingsPanel);
        listSettingsPanel.setLayout(listSettingsPanelLayout);
        listSettingsPanelLayout.setHorizontalGroup(
            listSettingsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, listSettingsPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(listSettingsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(SortingAndGroupingLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, listSettingsPanelLayout.createSequentialGroup()
                        .addComponent(gainStartField, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(gainToLabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(gainEndField, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(listSettingsPanelLayout.createSequentialGroup()
                        .addComponent(lossStartField, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(lossToLabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(lossEndField, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addComponent(refreshButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(listSettingsSeparator, javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, listSettingsPanelLayout.createSequentialGroup()
                        .addGroup(listSettingsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(lossLabel)
                            .addComponent(gainLabel))
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, listSettingsPanelLayout.createSequentialGroup()
                        .addGroup(listSettingsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(groupSettingLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(rankingSettingLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(listSettingsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(groupComboBox, 0, 121, Short.MAX_VALUE)
                            .addComponent(sortComboBox, 0, 121, Short.MAX_VALUE)))
                    .addComponent(FiltersLabel, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(6, 6, 6))
        );
        listSettingsPanelLayout.setVerticalGroup(
            listSettingsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(listSettingsPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(SortingAndGroupingLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(listSettingsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(rankingSettingLabel)
                    .addComponent(sortComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(10, 10, 10)
                .addGroup(listSettingsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(groupSettingLabel)
                    .addComponent(groupComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(listSettingsSeparator, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(FiltersLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(lossLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(listSettingsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lossStartField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lossToLabel)
                    .addComponent(lossEndField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(10, 10, 10)
                .addComponent(gainLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(listSettingsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(gainStartField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(gainToLabel)
                    .addComponent(gainEndField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(refreshButton)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        listPane.setRightComponent(listSettingsPanel);

        resultScrollPane.setName("resultScrollPane"); // NOI18N
        resultScrollPane.setPreferredSize(new java.awt.Dimension(400, 322));
        resultScrollPane.addComponentListener(new java.awt.event.ComponentAdapter() {
            public void componentResized(java.awt.event.ComponentEvent evt) {
                resultScrollPaneComponentResized(evt);
            }
        });

        tree.setRowHeight(0);//hack to make rowHeight adjust to components instead of fixed (stupid LAF)
        tree.setCellRenderer(new CustomTreeCellRenderer(tree));
        tree.getSelectionModel().setSelectionMode(TreeSelectionModel.SINGLE_TREE_SELECTION);
        tree.addTreeSelectionListener(new javax.swing.event.TreeSelectionListener() {
            public void valueChanged(javax.swing.event.TreeSelectionEvent evt) {
                treeValueChanged(evt);
            }
        });
        resultScrollPane.setViewportView(tree);

        listPane.setLeftComponent(resultScrollPane);

        topPane.setRightComponent(listPane);

        mainPane.setLeftComponent(topPane);

        visualizationPane.setResizeWeight(0.5);

        tablePane.setPreferredSize(new java.awt.Dimension(500, 400));
        tablePane.setLayout(new java.awt.BorderLayout());

        tableLabel.setBackground(new java.awt.Color(255, 255, 255));
        tableLabel.setForeground(new java.awt.Color(51, 51, 51));
        tableLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        tableLabel.setText("Profitability <right-click for sensitivity analysis>");
        tablePane.add(tableLabel, java.awt.BorderLayout.PAGE_START);

        visualizationPane.setRightComponent(tablePane);
        tablePane.getAccessibleContext().setAccessibleDescription("");

        graphPane.setPreferredSize(new java.awt.Dimension(500, 400));
        graphPane.addComponentListener(new java.awt.event.ComponentAdapter() {
            public void componentResized(java.awt.event.ComponentEvent evt) {
                graphPaneComponentResized(evt);
            }
        });
        graphPane.setLayout(new java.awt.BorderLayout());

        graphLabel.setBackground(new java.awt.Color(255, 255, 255));
        graphLabel.setForeground(new java.awt.Color(51, 51, 51));
        graphLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        graphLabel.setText("Model preview <double click to open in editor>");
        graphPane.add(graphLabel, java.awt.BorderLayout.PAGE_START);

        visualizationPane.setLeftComponent(graphPane);

        placeholderLabel.setForeground(new java.awt.Color(102, 102, 102));
        placeholderLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        placeholderLabel.setText("< Select a scenario above to see its model and financials here>");
        placeholderLabel.setToolTipText("sdasdsadas");
        placeholderLabel.setPreferredSize(visualizationPane.getPreferredSize());

        bottomPane.setLayer(visualizationPane, javax.swing.JLayeredPane.DEFAULT_LAYER);
        bottomPane.setLayer(placeholderLabel, javax.swing.JLayeredPane.DEFAULT_LAYER);

        javax.swing.GroupLayout bottomPaneLayout = new javax.swing.GroupLayout(bottomPane);
        bottomPane.setLayout(bottomPaneLayout);
        bottomPaneLayout.setHorizontalGroup(
            bottomPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(visualizationPane)
            .addGroup(bottomPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addComponent(placeholderLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        bottomPaneLayout.setVerticalGroup(
            bottomPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(visualizationPane)
            .addGroup(bottomPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(bottomPaneLayout.createSequentialGroup()
                    .addComponent(placeholderLabel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGap(0, 0, Short.MAX_VALUE)))
        );

        visualizationPane.setVisible(false);

        mainPane.setRightComponent(bottomPane);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(mainPane)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(mainPane, javax.swing.GroupLayout.DEFAULT_SIZE, 721, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void treeValueChanged(javax.swing.event.TreeSelectionEvent evt) {//GEN-FIRST:event_treeValueChanged
        //on selection
        if (!tree.isSelectionEmpty()) {
             DefaultMutableTreeNode node = (DefaultMutableTreeNode) tree.getLastSelectedPathComponent();
             
             if(node.getUserObject() instanceof E3Model){
             
            //enable visualization
            visualizationPane.setVisible(true);
            placeholderLabel.setVisible(false);

            if (node.getUserObject() instanceof E3Model) {
                //grab the E3Model of the selected row
                selectedModel = (E3Model) node.getUserObject();
                //create a chart 
                chart = ChartGenerator.generateChart(selectedModel, generationSettings.getSelectedNeed(), generationSettings.getStartValue(), generationSettings.getEndValue(), false);
                //then, 
                // if the chartPanel exists, update it
                if (chartPanel != null) {
                    chartPanel.setChart(chart);
                }//otherwise create one and add it the window
                else {
                    chartPanel = new ChartPanel(chart);
                    tablePane.add(chartPanel);
                    chartPanel.setVisible(true);
                }

                // Remove current e3graph if it's already there
                if (graphPane.getComponentCount() > 1) {
                    graphPane.remove(1);
                }

                //create a graph
                graph = new E3Graph(baseGraph, selectedModel.getFraudChanges());

                // Then create a graph panel
                graphPanel = new E3GraphComponent(graph);
                // Disable right mouse clicks
                graphPanel.setPopupTriggerEnabled(false);
                // Prevent other funny business
                graphPanel.setEnabled(false);
                // Apparently mxGraphControl takes care of mouse business of
                // mxGraph (which is the parent of E3Graph)
                graphPanel.getGraphControl().addMouseListener(new MouseAdapter() {
                    @Override
                    public void mouseClicked(MouseEvent e) {
                        System.out.println("Mouse clicked on graph!");
                        // On doubleclick
                        if (e.getClickCount() == 2) {
                            // Create a new tab with the current graph
                            FraudWindow_old.this.mainFrame.addNewTabAndSwitch(new E3Graph((E3Graph) graphPanel.getGraph(), false));
                            // Switch to the screen
                            FraudWindow_old.this.mainFrame.mainFrame.requestFocus();
                        }
                    }
                });

                // Refresh E3GraphComponent to make sure E3Style is used
                graphPanel.refresh();
                // Add it 
                graphPane.add(graphPanel);
                // Set it visible if it isn't already
                graphPanel.setVisible(true);

                // Graph scaling code
                // To ensure that the size is not 0
                if (graphPane.getVisibleRect().getWidth() < 10) {
                    myFrame.revalidate();
                }

                graphPanel.centerAndScaleView(graphPane.getVisibleRect().getWidth(), graphPane.getVisibleRect().getHeight());

                // Make the scrollbars disappear
                graphPanel.setHorizontalScrollBarPolicy(JScrollPane.HORIZONTAL_SCROLLBAR_NEVER);
                graphPanel.setVerticalScrollBarPolicy(JScrollPane.VERTICAL_SCROLLBAR_NEVER);

                myFrame.revalidate();
            }
        } else {
            visualizationPane.setVisible(false);
            placeholderLabel.setVisible(true);
        }}
        else {
            visualizationPane.setVisible(false);
            placeholderLabel.setVisible(true);        
        }
    }//GEN-LAST:event_treeValueChanged

    private void resultScrollPaneComponentResized(java.awt.event.ComponentEvent evt) {//GEN-FIRST:event_resultScrollPaneComponentResized
        TreeModel oldModel = tree.getModel();
        Enumeration<TreePath> expandedDescendants = tree.getExpandedDescendants(new TreePath(root.getPath()));
        tree.setModel(null);
        tree.setModel(oldModel);
        while(expandedDescendants!=null && expandedDescendants.hasMoreElements()){
            tree.expandPath(expandedDescendants.nextElement());
        }
    }//GEN-LAST:event_resultScrollPaneComponentResized

    private void generateButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_generateButtonActionPerformed
        readSettings();
        generateSortAndDisplay();
    }//GEN-LAST:event_generateButtonActionPerformed

    private void advancedSettingsLabelMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_advancedSettingsLabelMouseClicked
        AdvancedGenerationSettingsDialog dialog = new AdvancedGenerationSettingsDialog(this.myFrame, true, this.advancedGenerationSettings, baseModel.getValueObjectStrings());
        if (dialog.getSettings() != null) {
            this.advancedGenerationSettings = dialog.getSettings();
        }
    }//GEN-LAST:event_advancedSettingsLabelMouseClicked

    private void graphPaneComponentResized(java.awt.event.ComponentEvent evt) {//GEN-FIRST:event_graphPaneComponentResized
        if (graphPanel != null && graphPane != null) {
            graphPanel.centerAndScaleView(graphPane.getVisibleRect().getWidth(), graphPane.getVisibleRect().getHeight());
            myFrame.revalidate();
        }
    }//GEN-LAST:event_graphPaneComponentResized

    private void showAllLabelMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_showAllLabelMouseClicked
        readSettings();
        // store current filter settings
        FilteringSettings tempFilteringSettings = this.filteringSettings;
        //remove filter settings
        this.filteringSettings.clearFilters();
        sortAndDisplay();
        //restore filter settings
        this.filteringSettings = tempFilteringSettings;
    }//GEN-LAST:event_showAllLabelMouseClicked

    private void gainEndFieldFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_gainEndFieldFocusLost
        if (gainEndField.getText() == null || gainEndField.getText().isEmpty()) {
            gainEndField.setValue(null);
        }
    }//GEN-LAST:event_gainEndFieldFocusLost

    private void lossEndFieldFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_lossEndFieldFocusLost
        if (lossEndField.getText() == null || lossEndField.getText().isEmpty()) {
            lossEndField.setValue(null);
        }
    }//GEN-LAST:event_lossEndFieldFocusLost

    private void gainStartFieldFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_gainStartFieldFocusLost
        if (gainStartField.getText() == null || gainStartField.getText().isEmpty()) {
            gainStartField.setValue(null);
        }
    }//GEN-LAST:event_gainStartFieldFocusLost

    private void lossStartFieldFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_lossStartFieldFocusLost
        if (lossStartField.getText() == null || lossStartField.getText().isEmpty()) {
            lossStartField.setValue(null);
        }
    }//GEN-LAST:event_lossStartFieldFocusLost

    private void refreshButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_refreshButtonActionPerformed
        readSettings();
        sortAndDisplay();
    }//GEN-LAST:event_refreshButtonActionPerformed

    private void sortComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_sortComboBoxActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_sortComboBoxActionPerformed

    private void groupComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_groupComboBoxActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_groupComboBoxActionPerformed

    private void generateSortAndDisplay() {
        //Have a Worker thread to the time-consuming generation and raking (to not freeze the GUI)
        GenerationWorkerV2 generationWorker = new GenerationWorkerV2(baseModel, generationSettings, advancedGenerationSettings) {
            //make it so that when Worker is done
            @Override
            protected void done() {
                try {
                    //the Worker's result is retrieved
                    groupedSubIdealModels = get();
                    //Progress bar is replaced with button
                    progressBar.setVisible(false);
                    //and the cursor goes back to normal
                    setCursor(Cursor.getPredefinedCursor(Cursor.DEFAULT_CURSOR));
                    //now sort and display
                    sortAndDisplay();
                    //catch all in case something goes wrong
                } catch (InterruptedException | ExecutionException ex) {
                    setCursor(Cursor.getPredefinedCursor(Cursor.DEFAULT_CURSOR));
                    generateButton.setVisible(true);
                    System.err.println("Exception encountered during generation: \n");
                    ex.printStackTrace();
                    PopUps.infoBox("<html>Encountered an error ("+ex.toString()+"). <br> Please send a description of the steps taken to: danionita@gmail.com.</html>", "Error");
                }
            }
        };
        //replace generate button with progress bar
        generateButton.setVisible(false);
        progressBar.setVisible(true);
        progressBar.setIndeterminate(true);
        progressBar.setString("generating...");
        //change mouse cursor 
        this.setCursor(Cursor.getPredefinedCursor(Cursor.WAIT_CURSOR));
        //and run the worker
        generationWorker.execute();
    }

    private void sortAndDisplay() {
        //Have a Worker thread to the time-consuming generation and raking (to not freeze the GUI)
        SortingAndFilteringWorker rankingWorker = new SortingAndFilteringWorker(groupedSubIdealModels, baseModel, generationSettings, sortingAndGroupingSettings, filteringSettings) {
            //make it so that when Worker is done
            @Override
            protected void done() {
                try {
                    //The Worker's result is retrieved
                    results = get();
                    int totalResults = results.getTotalResults();
                    int shownResults = results.getShownResults();
                    //Update result label 
                    resultCountLabel.setText("Showing " + shownResults + "/" + totalResults + " results");

                    //add ability to show filtered rsults, if needed
                    if (shownResults < totalResults) {
                        showAllLabel.setVisible(true);
                    } else {
                        showAllLabel.setVisible(false);
                    }

                    //if there are any results to show
                    if (results.getShownResults() > 0) {
                        root = results.getRoot();
                        //Hide root to save space
                        tree.setRootVisible(false);
                    } else {
                        root = new DefaultMutableTreeNode("No fraud scenarios found (check generation settings or filters)");
                        tree.setRootVisible(true);
                    }

                    //show tree
                    treeModel.setRoot(root);
                    tree.setModel(treeModel);                    
                    tree.updateUI();                    
                                            
                    //if default grouping is used, expand all level 1 nodes
                    if(sortingAndGroupingSettings.getGroupingCriteria()==0){
                        Enumeration e = root.breadthFirstEnumeration();                        
                        while(e.hasMoreElements()) {                                 
                            DefaultMutableTreeNode node = (DefaultMutableTreeNode)e.nextElement();  
                            if(node.getLevel()==1){
                            tree.expandPath(new TreePath(((DefaultMutableTreeNode)node).getPath()));                            
                            }
                        }                   
                    }
                    //else show the root
                    else{           
                        root.setUserObject("Collusion groups:");
                        tree.setRootVisible(true);
                                 
                    tree.updateUI();   
                    }
                                        
                    //Replace progress bar with generate button
                    progressBar.setVisible(false);
                    generateButton.setVisible(true);
                    //show result label
                    resultCountLabel.setVisible(true);
                    //The cursor also goes back to normal
                    setCursor(Cursor.getPredefinedCursor(Cursor.DEFAULT_CURSOR));
                    //catch all in case something goes wrong
                } catch (InterruptedException | ExecutionException ex) {
                    setCursor(Cursor.getPredefinedCursor(Cursor.DEFAULT_CURSOR));
                    System.err.println("Exception encountered during generation: \n");
                    ex.printStackTrace();
                    PopUps.infoBox("<html>Encountered an error ("+ex.toString()+"). <br> Please send a description of the steps taken to: danionita@gmail.com.</html>", "Error");
                }
            }
        };
        //attach a listener to the worker in order to update the progress bar
        rankingWorker.addPropertyChangeListener(
                new PropertyChangeListener() {
            public void propertyChange(PropertyChangeEvent evt) {
                if ("progress".equals(evt.getPropertyName())) {
                    progressBar.setValue((Integer) evt.getNewValue());
                }
            }
        });
        //replace generate button with progress bar
        generateButton.setVisible(false);
        progressBar.setVisible(true);
        progressBar.setIndeterminate(false);
        progressBar.setString("Sorting & filtering...");
        //change mouse cursor 
        this.setCursor(Cursor.getPredefinedCursor(Cursor.WAIT_CURSOR));
        //and run the worker
        rankingWorker.execute();
    }

    /**
     * reads and stores the value of all the settings in the window
     */
    private void readSettings() {
        //read and store generation settings        
        int needStartValue = Integer.parseInt(needStartField.getText());
        int needEndValue = Integer.parseInt(needEndField.getText());
        String selectedActorString = mainActorComboBox.getSelectedItem().toString();
        String selectedNeedString = needComboBox.getSelectedItem().toString();
        Resource selectedActor = actorsMap.get(selectedActorString);
        Resource selectedNeed = needsMap.get(selectedNeedString);
        generationSettings.setStartValue(needStartValue);
        generationSettings.setEndValue(needEndValue);
        generationSettings.setSelectedActor(selectedActor);
        generationSettings.setSelectedNeed(selectedNeed);
        generationSettings.setSelectedNeedString(selectedNeedString);
        generationSettings.setSelectedActorString(selectedActorString);

        //read and store sorting and grouping settings
        int sortCriteria = sortComboBox.getSelectedIndex();
        int groupingCriteria = groupComboBox.getSelectedIndex();
        sortingAndGroupingSettings.setGroupingCriteria(groupingCriteria);
        sortingAndGroupingSettings.setSortCriteria(sortCriteria);

        //read and store filtering settings
        double gainMin, gainMax, lossMin, lossMax;
        if (!gainStartField.getText().equals("") && gainStartField.getText() != null) {
            gainMin = Double.parseDouble(gainStartField.getText());
        } else {
            gainMin = -Double.MAX_VALUE;
        }
        if (!lossStartField.getText().equals("") && lossStartField.getText() != null) {
            lossMin = Double.parseDouble(lossStartField.getText());
        } else {
            lossMin = -Double.MAX_VALUE;
        }
        if (!gainEndField.getText().equals("") && gainEndField.getText() != null) {
            gainMax = Double.parseDouble(gainEndField.getText());
        } else {
            gainMax = Double.MAX_VALUE;
        }
        if (!lossEndField.getText().equals("") && lossEndField.getText() != null) {
            lossMax = Double.parseDouble(lossEndField.getText());
        } else {
            lossMax = Double.MAX_VALUE;
        }
        filteringSettings.setGainMin(gainMin);
        filteringSettings.setLossMin(lossMin);
        filteringSettings.setGainMax(gainMax);
        filteringSettings.setLossMax(lossMax);
    }

    public void fitMiniGraph() {
        Main.mainFrame.pack();

        mxGraphView view = graphPanel.getGraph().getView();

        double minX = Double.MAX_VALUE, minY = Double.MAX_VALUE;

        for (Object obj : graph.getChildCells(graph.getDefaultParent())) {
            // Only look at the positions from top-level elements
            if (!(graph.getModel().getValue(obj) instanceof ValueActivity
                    || graph.getModel().getValue(obj) instanceof MarketSegment
                    || graph.getModel().getValue(obj) instanceof Actor)) {
                continue;
            }

            mxGeometry gm = graph.getCellGeometry(obj);
            minX = Math.min(minX, gm.getX());
            minY = Math.min(minY, gm.getY());
        }

        double scale = graphPanel.getVisibleRect().getWidth() / view.getGraphBounds().getWidth();
        //System.out.println(scale);

        view.scaleAndTranslate(scale, -minX, -minY);

        graphPanel.refresh();
    }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel FiltersLabel;
    private javax.swing.JLabel SortingAndGroupingLabel;
    private javax.swing.JLabel advancedSettingsLabel;
    private javax.swing.JLayeredPane bottomPane;
    private javax.swing.ButtonGroup fraudTypeButtonGroup;
    private javax.swing.JFormattedTextField gainEndField;
    private javax.swing.JLabel gainLabel;
    private javax.swing.JFormattedTextField gainStartField;
    private javax.swing.JLabel gainToLabel;
    private javax.swing.JButton generateButton;
    private javax.swing.JLayeredPane generationLayeredPane;
    private javax.swing.JLabel generationSettingsLabel;
    private javax.swing.JPanel generationSettingsPanel;
    private javax.swing.JSeparator generationSettingsSeparator1;
    private javax.swing.JLabel graphLabel;
    private javax.swing.JPanel graphPane;
    private javax.swing.JComboBox<String> groupComboBox;
    private javax.swing.JLabel groupSettingLabel;
    private javax.swing.JSplitPane listPane;
    private javax.swing.JPanel listSettingsPanel;
    private javax.swing.JSeparator listSettingsSeparator;
    private javax.swing.JFormattedTextField lossEndField;
    private javax.swing.JLabel lossLabel;
    private javax.swing.JFormattedTextField lossStartField;
    private javax.swing.JLabel lossToLabel;
    private javax.swing.JComboBox<String> mainActorComboBox;
    private javax.swing.JLabel mainActorLabel;
    private javax.swing.JSplitPane mainPane;
    private javax.swing.JComboBox<String> needComboBox;
    private javax.swing.JFormattedTextField needEndField;
    private javax.swing.JLabel needLabel;
    private javax.swing.JFormattedTextField needStartField;
    private javax.swing.JLabel needToLabel;
    private javax.swing.JLabel occuringLabel;
    private javax.swing.JLabel placeholderLabel;
    private javax.swing.JProgressBar progressBar;
    private javax.swing.JLabel rankingSettingLabel;
    private javax.swing.JButton refreshButton;
    private javax.swing.JLabel resultCountLabel;
    private javax.swing.JScrollPane resultScrollPane;
    private javax.swing.JLabel showAllLabel;
    private javax.swing.JComboBox<String> sortComboBox;
    private javax.swing.JLabel tableLabel;
    private javax.swing.JPanel tablePane;
    private javax.swing.JLabel timesLabel;
    private javax.swing.JSplitPane topPane;
    private javax.swing.JTree tree;
    private DefaultMutableTreeNode root;
    private DefaultTreeModel treeModel;
    private javax.swing.JSplitPane visualizationPane;
    // End of variables declaration//GEN-END:variables
}
